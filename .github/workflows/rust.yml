name: Rust CI

on:
  push:
    branches: [main]
    paths:
      - 'src-tauri/**'
      - 'src/**'
      - '.github/workflows/rust.yml'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [main]
    paths:
      - 'src-tauri/**'
      - 'src/**'
      - '.github/workflows/rust.yml'
      - 'Cargo.toml'
      - 'Cargo.lock'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  TARPAULIN_VERSION: "0.30.0"

jobs:
  test:
    name: Test - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libssl-dev \
          libxdo-dev

    - name: Cache cargo and build artifacts
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "./src-tauri -> target"
        cache-on-failure: true

    - name: Run cargo fmt
      working-directory: ./src-tauri
      run: cargo fmt -- --check

    - name: Run cargo clippy
      working-directory: ./src-tauri
      run: cargo clippy -- -D warnings

    - name: Build
      working-directory: ./src-tauri
      run: cargo build --verbose

    - name: Run tests
      working-directory: ./src-tauri
      run: cargo test --lib --verbose -- --skip clipboard::tests

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run security audit
      uses: rustsec/audit-check@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ./src-tauri


  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libssl-dev \
          libxdo-dev

    - name: Cache cargo and build artifacts
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "./src-tauri -> target"
        cache-on-failure: true

    - name: Cache tarpaulin
      id: cache-tarpaulin
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-tarpaulin
        key: ${{ runner.os }}-tarpaulin-${{ env.TARPAULIN_VERSION }}
    
    - name: Install tarpaulin
      if: steps.cache-tarpaulin.outputs.cache-hit != 'true'
      run: cargo install cargo-tarpaulin --version ${{ env.TARPAULIN_VERSION }}

    - name: Generate coverage report
      working-directory: ./src-tauri
      env:
        RUST_TEST_THREADS: 1
        CI: true
      run: |
        cargo tarpaulin \
          --lib \
          --out Xml \
          --out Html \
          --output-dir ./target/coverage \
          --exclude-files "*/build.rs" \
          --exclude-files "*/tests/*" \
          --exclude-files "*/main.rs" \
          --exclude-files "*/lib.rs" \
          --exclude-files "*/tray.rs" \
          --exclude-files "*/window.rs" \
          --ignore-panics \
          --skip-clean \
          -- --skip clipboard::tests --skip test_paste_clipboard

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./src-tauri/target/coverage/cobertura.xml
        flags: unittests
        name: rust-coverage
        fail_ci_if_error: false
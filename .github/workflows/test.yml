name: Rust Test Suite

on:
  push:
    branches: [rust-refactor]
    paths:
      - 'src-tauri/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src-tauri/**'
      - '.github/workflows/test.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: debug

jobs:
  test:
    name: Test - ${{ matrix.os }} / Rust ${{ matrix.rust }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Only test beta on Ubuntu to save CI time
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libssl-dev \
          xvfb

    # macOS dependencies are handled by Tauri/system

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-git-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: src-tauri/target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-

    - name: Run cargo fmt
      working-directory: ./src-tauri
      run: cargo fmt -- --check

    - name: Run cargo clippy
      working-directory: ./src-tauri
      run: cargo clippy -- -D warnings

    - name: Build
      working-directory: ./src-tauri
      run: cargo build --verbose

    - name: Run tests (Linux with xvfb)
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./src-tauri
      run: |
        xvfb-run -a cargo test --lib --verbose -- --nocapture

    - name: Run tests (non-Linux)
      if: matrix.os != 'ubuntu-latest'
      working-directory: ./src-tauri
      run: |
        cargo test --lib --verbose -- --nocapture

    - name: Run doc tests
      working-directory: ./src-tauri
      run: cargo test --doc --verbose

    - name: Check for security vulnerabilities
      working-directory: ./src-tauri
      run: |
        cargo install cargo-audit || true
        cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libssl-dev

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-git-

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage report
      working-directory: ./src-tauri
      run: |
        cargo tarpaulin \
          --lib \
          --out Xml \
          --out Html \
          --out Lcov \
          --exclude-files "*/main.rs" \
          --exclude-files "*/build.rs" \
          --exclude-files "*/tests/*" \
          --exclude-files "*/clipboard.rs" \
          --skip-clean \
          --workspace \
          --timeout 120 \
          --fail-under 70

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./src-tauri/cobertura.xml
        flags: unittests
        name: codecov-rust
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          src-tauri/tarpaulin-report.html
          src-tauri/lcov.info
        retention-days: 30

    - name: Coverage summary
      working-directory: ./src-tauri
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "Coverage report has been generated and uploaded." >> $GITHUB_STEP_SUMMARY
        echo "- View the HTML report in the artifacts section" >> $GITHUB_STEP_SUMMARY
        echo "- Codecov will comment on the PR with detailed coverage" >> $GITHUB_STEP_SUMMARY
        if [ -f "lcov.info" ]; then
          lines_found=$(grep -E "^DA:" lcov.info | grep -E ",1$" | wc -l | tr -d ' ')
          lines_total=$(grep -E "^DA:" lcov.info | wc -l | tr -d ' ')
          if [ $lines_total -gt 0 ]; then
            coverage_percent=$(echo "scale=2; $lines_found * 100 / $lines_total" | bc)
            echo "- Coverage: $lines_found / $lines_total lines ($coverage_percent%)" >> $GITHUB_STEP_SUMMARY
          fi
        fi